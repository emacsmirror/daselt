;;; d-emacs-dfk.el --- Creation of dual-function-keys configurations from a d-emacs-coords-layer and integration into layouts  -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Alexander Prähauser

;; Author: Alexander Prähauser <ahprae@protonmail.com>
;; Keywords: tools

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; Overview:
;; This file provides functionality to create configurations for dual-function keys
;; based on coordinates defined in d-emacs-coords-layer. It allows users to define
;; key bindings that behave differently when tapped versus held, accommodating
;; different keyboard layouts (ANSI/ISO) and modifier configurations.

;; Key Features:
;; - Define coordinate systems for various key functions, including Ctrl, Alt, Meta,
;;   Hyper, and Shift.
;; - Generate configuration files to customize how keys respond to taps and holds.
;; - Support for multiple keyboard layout types and modifier placements.
;; - Customization options for timing between key actions and directories for config
;;   outputs.

;; Usage:
;; It is assumed that users are using a coordinate system as in
;; `d-emacs-coords'. For each row that is used in the `d-dfk'-layout, the
;; keycode of the midpoint has to be defined in `d-dfk-mid-codes-list'. To find
;; out that keycode, you can look at the file
;; https://github.com/torvalds/linux/blob/master/include/uapi/linux/input-event-codes.h.

;; The codes of keys in a row are then calculated from that of the midpoint. The
;; codes of some keys, such as CapsLock, don't follow their place on the
;; keyboard and so have to be specified manually in
;; `d-emacs-dfk-special-codes-list'.

;; The config is generated by the command `d-emacs-dfk-generate-config' using a
;; bindlist. To be able to encompass different keyboard types however, this
;; bindlist should itself be generated from a bindlist form such as
;; `d-emacs-dfk-default-bindlist-form', which evaluates to a bindlist with the
;; format specified in `d-emacs-dfk-special-bindlist-form'. This way, different
;; bindlists can be generated depending on the options
;; `d-emacs-dfk-outside-mods', `d-emacs-dfk-keyboard-layout-type', the
;; coordinates for modifier keys specified in `d-emacs-dfk-C-coords',
;; `d-emacs-dfk-M-coords', `d-emacs-dfk-s-coords' and `d-emacs-dfk-H-coords' and
;; the coordinates of keys that act as Shift, ISO-level3-shift and
;; ISO-level-5-shift. It is assumed here that some of these shifts should
;; exhibit locking behavior on certain levels and some shouldn't, which is why
;; options for specifying the coordinates of these shifts come in two varieties,
;; a locking and a non-locking one. So for instance, level-2-shifts (like the
;; normal shift keys) are specified in the options
;; `d-emacs-dfk-locking-2-coords' and `d-emacs-dfk-non-locking-2-coords'. The
;; actual shifting and locking behavior of the keys whose coordinates are
;; specified in these options has to be configured in the xkb-file housing the
;; keyboard-layout for which the dfk-config is generated.

;; `d-emacs-dfk' also provides options `d-emacs-dfk-outside-mods' and
;; `d-emacs-dfk-layout-type'. Both of these are only meaningful if you have your
;; bindlist form evaluate to different bindlists depending on their values. The
;; first is meant to allow users to move modifiers and layer shifts away from
;; keys that send key signals when tapped, the second to allow accomodating both
;; ANSI and ISO layouts. See `d-emacs-dfk-default-bindlist-form' for an example
;; for how to use them. You can use `d-emacs-dfk-generate-standard-configs' to
;; generate configs with these customs set to any of their supported values.

;; `d-emacs-dfk' provides means to integrate the configuration into
;; layouts generated by `d-emacs-xkb' as a zeroeth layer. This is done
;; automatically after `d-emacs-xkb' is loaded. The exact behavior of
;; the layer generation can be controlled using
;; `d-emacs-dfk-layer-level-shifts',
;; `d-emacs-dfk-special-tap-coord-strings',
;; `d-emacs-dfk-special-signal-translations-list'
;; `d-emacs-dfk-discrete-modifiers-list'
;; `d-emacs-dfk-special-layer-0-placevals-alist'.

;;; Code:
;;;; Preamble
(require 'd-emacs-coords)


;;;; Initial Constants
(defconst d-emacs-dfk-default-bindlist-form
  '`(;; Ctrl
     ((2 0) . ((2 0) . ,(nth 2 d-emacs-dfk-C-coords)))
     ("kp3" . ("kp3" . ,(nth 2 d-emacs-dfk-C-coords)))

     ;; Hyper
     ((-2 -6) . (,(nth 0 d-emacs-dfk-H-coords) . ,(nth 0 d-emacs-dfk-H-coords)))
     ((1 0) . ((1 0) . ,(nth 0 d-emacs-dfk-H-coords)))

     ;; Super
     ((-2 -5) . (,(nth 0 d-emacs-dfk-s-coords)
                 . ,(nth 0 d-emacs-dfk-s-coords)))

     ;; Meta
     ((2 -4) . (,(car d-emacs-dfk-M-coords) . ,(car d-emacs-dfk-M-coords)))

     ;; Alt
     ,(unless (string= d-emacs-dfk-keyboard-layout-type "ansi")
        '((1 -7) . ("f8" . "f8")))
     ((1 7) . ("f8" . "f8"))

     ;; Shift and discrete Meta
     ((2 -1) . ("f15" . ,(nth 0 d-emacs-dfk-locking-2-coords)))
     ((2 1) . ("f15" . ,(nth 0 d-emacs-dfk-locking-2-coords)))

     ;; 3
     ((0 -6) . ("f14" . ,(nth 0 d-emacs-dfk-locking-3-coords)))
     ((0 6) . ("f14" . ,(nth 1 d-emacs-dfk-locking-3-coords)))

     ;; 4
     (,(if d-emacs-dfk-outside-mods '(-2 -3) '(-1 -3))
      . (,(if d-emacs-dfk-outside-mods "scrolllock" '(-1 -3))
         . (,(nth 1 d-emacs-dfk-non-locking-2-coords)
            ,(nth 0 d-emacs-dfk-non-locking-3-coords))))
     (,(if d-emacs-dfk-outside-mods '(-2 3) '(-1 3))
      . (,(if d-emacs-dfk-outside-mods "scrolllock" '(-1 3))
         . (,(nth 0 d-emacs-dfk-non-locking-2-coords)
            ,(nth 1 d-emacs-dfk-non-locking-3-coords))))

     ;; 5
     ((-2 -4) . ((-2 -4) . ,(nth 0 d-emacs-dfk-locking-5-coords)))
     ((-2 4) . ((-2 4) . ,(nth 0 d-emacs-dfk-locking-5-coords)))

     ;; 6
     (,(if d-emacs-dfk-outside-mods '(-2 -2) '(-2 -3))
      . (,(if d-emacs-dfk-outside-mods
              '(-2 -2)
            "scrolllock")
         . (,(nth 1 d-emacs-dfk-non-locking-2-coords)
            ,(nth 0 d-emacs-dfk-locking-5-coords))))
     (,(if d-emacs-dfk-outside-mods '(-2 2) '(-2 3))
      . (,(if d-emacs-dfk-outside-mods
              '(-2 2)
            "scrolllock")
         . (,(nth 0 d-emacs-dfk-non-locking-2-coords)
            ,(nth 0 d-emacs-dfk-locking-5-coords))))

     ;; 7
     (,(if (string= d-emacs-dfk-keyboard-layout-type "ansi") '(1 -7) '(1 -6))
      . ((1 -6) . (,(nth 0 d-emacs-dfk-non-locking-3-coords)
                   ,(nth 0 d-emacs-dfk-non-locking-5-coords))))
     ((1 6)
      . ((1 6) . (,(nth 1 d-emacs-dfk-non-locking-3-coords)
                  ,(nth 1 d-emacs-dfk-non-locking-5-coords))))

     ;; 8
     ((-1 -6) . ("f11" . (,(nth 0 d-emacs-dfk-non-locking-2-coords)
                          ,(nth 0 d-emacs-dfk-locking-3-coords)
                          ,(nth 0 d-emacs-dfk-non-locking-5-coords))))
     ((-1 6) . ("f11" . (,(nth 1 d-emacs-dfk-non-locking-2-coords)
                         ,(nth 1 d-emacs-dfk-locking-3-coords)
                         ,(nth 0 d-emacs-dfk-non-locking-5-coords)))))
  "Form to generate the d-dfk layouts.
When evaluated, returns a bindlist that can be used in
`d-emacs-dfk-generate-config'. The exact composition of the bindlist depends on
the constants `d-emacs-dfk-outside-mods' and `d-emacs-dfk-keyboard-layout-type'.

The numbers 2, 3 and 5 in variable names here refer to
ISO-level-shift-modifiers. These are used by xkb to access higher levels through
combining them. In Daselt's layer numbering, these are the modifier combinations
needed to access layers:

3 = 3
4 = 3 + 5 (meaning a layer 4 accessed by combining a level-3-shift and
a level-5-shift,)
5 = 5
6 = 2 + 5
7 = 3 + 5
8 = 2 + 3 + 5

These layer-level combinations are saved in `d-emacs-dfk-layer-level-shifts' to
allow the level combinations to be translated into layers in
`d-emacs-dfk-coords-layer-0'.

Keys are chosen to solve the following problems:

- When the combinations sent when KEY1 and KEY2 are held share signals SIGS,
  then these are not received when both keys are pressed together (tapped or
  held). Therefore, if held KEY1 is a modifier/layer-shift that has to be
  applicable when KEY2 is tapped, it cannot share any signals with KEY2 held.
  This is important for KEY_E, KEY_I, KEY_102ND and KEY_SLASH, which are
  layer-shifts that also house symbols on all layers. Here, it is assumed
  modifiers are only applied from across the keyboard so keys on the same side
  can share modifiers when held.

- (1 -6) ((1 -7) in ANSI-layouts) and (1 7) to access layer 8 and are
  supposed to lock layers 2-4 when applied to their layer-shift keys. For this,
  level-shift KEYs to layers 2-4 are configured to lock when KEY is held while
  the layer-8-shift across the keyboard is held.

- However, when a KEY1 is tapped that contains a level-shift LEV that is
  configured in dxkb to lock LEV on layer 8, while another key KEY2 is held that
  such that the union of the level-shifts on KEY1 and KEY2 contains all three
  level-shifts, then LEV is locked even though it shouldn't because KEY1 is only
  tapped and its held bindings should not factor in.")

(defconst d-emacs-dfk-supported-layout-types
  '("ansi" "iso")
  "List of supported keyboard types.")

;;;; Customs
(defgroup d-emacs-dfk
  nil
  "Custom group for d-emacs-dfk."
  :group 'Daselt)

(defcustom d-emacs-dfk-outside-mods
  nil
  "Toggle to have generation of the d-dfk-layout put modifiers outside key letters."
  :type 'boolean
  :group 'd-emacs-dfk)

(defcustom d-emacs-dfk-keyboard-layout-type
  "iso"
  "Type of the keyboard layout.
This is how the keys on your keyboard are a arrranged.
Currently supported options are ansi and iso."
  :type 'string
  :group 'd-emacs-dfk
  :options '("ansi" "iso"))

(defcustom d-emacs-dfk-special-bindlist-form
  'd-emacs-dfk-default-bindlist-form
  "Symbol of the bindlist form used to generate the
d-emacs-dfk-config.
The value of this symbol should be a form that evaluates to a bindlist
with the following format:

- it should be headless.

- each car of a binding should either

  - consist of KEY coordinates describing a key.

  - be a string that becomes a key-definition according to
`input-event-codes' once it is upcased and `KEY_' is added at the
beginning of the string. You can look up key definitions at
https://github.com/torvalds/linux/blob/master/include/uapi/linux/input-event-codes.h.

- each cdr should be a cons consisting of

  - a car that is either a coordinate or description or a list of
    them. This is what KEY sends when it is tapped.

  - a cdr with the same specifications as the car. This is what KEY
    sends when it is held."
  :type 'symbol
  :group 'd-emacs-dfk)

(defcustom d-emacs-dfk-C-coords
  '((-2 -2) (-2 2) (2 3))
  "Coordinates for keys that are used for Ctrl-signals.

These are not the keys that are actually used as Ctrl-keys but the
keys whose signals are used. In other words, if a key in the
`d-emacs-dfk-special-bindlist-form' is used as a Ctrl key, it is
endowed with one of the signals of these keys when held."
  :type '(repeat coords)
  :group 'd-emacs-dfk)

(defcustom d-emacs-dfk-M-coords
  '((-2 0))
  "Coordinates for keys that are used for Meta-signals.

These are not the keys that are actually used as Meta-keys but the
keys whose signals are used. In other words, if a key in the
`d-emacs-dfk-special-bindlist-form' is used as a Meta key, it is
endowed with one of the signals of these keys when held."
  :type '(repeat coords)
  :group 'd-emacs-dfk)

(defcustom d-emacs-dfk-H-coords
  '((-2 6))
  "Coordinates for keys that are used for Hyper-signals.

These are not the keys that are actually used as Hyper-keys but the
keys whose signals are used. In other words, if a key in the
`d-emacs-dfk-special-bindlist-form' is used as a Hyper key, it is
endowed with one of the signals of these keys when held."
  :type '(repeat coords)
  :group 'd-emacs-dfk)

(defcustom d-emacs-dfk-s-coords
  '((-2 5))
  "Coordinates for keys that are used for Super-signals.

These are not the keys that are actually used as Super-keys but the
keys whose signals are used. In other words, if a key in the
`d-emacs-dfk-special-bindlist-form' is used as a Super key, it is
endowed with one of the signals of these keys when held."
  :type '(repeat coords)
  :group 'd-emacs-dfk)

(defcustom d-emacs-dfk-locking-2-coords
  '((0 7))
  "Coordinates for keys that are used for Shift-signals that lock.

By default these are added to the `d-emacs-dfk-2-coords'. See there for more
information."
  :type '(repeat coords)
  :group 'd-emacs-dfk)

(defcustom d-emacs-dfk-non-locking-2-coords
  '((1 -7) (1 7))
  "Coordinates for keys that are used for Shift-signals that don't lock.

By default these are added to the `d-emacs-dfk-2-coords'.
See there for more information."
  :type '(repeat coords)
  :group 'd-emacs-dfk)

(defcustom d-emacs-dfk-locking-3-coords
  '((-2 3) (2 1))
  "Coordinates for keys that are used for ISO-Level-3-Shift-signals that lock.

By default these are added to the `d-emacs-dfk-2-coords'.
See there for more information."
  :type '(repeat coords)
  :group 'd-emacs-dfk)

(defcustom d-emacs-dfk-non-locking-3-coords
  '((0 -6) (-2 -5))
  "Coordinates for keys that are used for ISO-Level-3-Shift-signals that don't lock.

By default these are added to the `d-emacs-dfk-2-coords'.
See there for more information."
  :type '(repeat coords)
  :group 'd-emacs-dfk)

(defcustom d-emacs-dfk-locking-5-coords
  '((-1 6))
  "Coordinates for keys that are used for ISO-Level-5-Shift-signals that lock.

By default these are added to the `d-emacs-dfk-2-coords'.
See there for more information."
  :type '(repeat coords)
  :group 'd-emacs-dfk)

(defcustom d-emacs-dfk-non-locking-5-coords
  '((0 6) (-2 -6))
  "Coordinates for keys that are used for ISO-Level-5-Shift-signals
that don't lock.

By default these are added to the `d-emacs-dfk-2-coords'. See there
for more information."
  :type '(repeat coords)
  :group 'd-emacs-dfk)

(defcustom d-emacs-dfk-row-mid-codes-list
  '((-2 . 7) (-1 . 20.5) (0 . 34.5) (1 . 48) (2 . 57))
  "The keycodes for the midpoints of rows in the coordinate system.
If a midpoint is between two keys with adjecent codes, use KEY1CODE.5
for the mid.

`d-emacs-dfk-generate-config' calculates the keycodes for the row
simply by adding/ subtracting the distance to the mid from the
mid-keycode, rounding appropriately if necessary. Note that
`d-emacs-dfk-generate-config' accounts for formal places in
`d-emacs-coords-formal-places-list'.

If keys at positions cannot be calculated in this way, they have to be
specified in `d-emacs-dfk-special-codes-list'.

If the midpoint is between two keys without adjecent codes, the entire
row has to be specified in `d-emacs-dfk-special-codes-list'."
  :type '(repeat (cons number number))
  :group 'd-emacs-dfk)

(defcustom d-emacs-dfk-special-codes-list
  '(((0 -6) . 58) ((1 -7) . 42) ((1 -6) . 86) ((2 1) . 100) ((2 -4) . 29) ((2 3) . 97))
  "List of positions with special codes in the coordinate system.

Add a place to this list if its code can't be calculated by adding or
subtracting from the midpoint of the row."
  :type '(repeat (cons 'coords natnum))
  :group 'd-emacs-dfk)

(defcustom d-emacs-dfk-tap-time
  nil
  "Time until a tap becomes a hold.

If nil or t, use the default of `dfk'.

Otherwise, the time should be given in Milliseconds."
  :type '(choice boolean number)
  :group 'd-emacs-dfk)

(defcustom d-emacs-dfk-double-tap-time
  nil
  "Time that can pass for two taps to be considered a double tap.

If nil or t, use the default of `dfk'.

Otherwise, the time should be given in Milliseconds."
  :type '(choice boolean number)
  :group 'd-emacs-dfk)

(defcustom d-emacs-dfk-synthetic-keys-time
  nil
  "Time between emulated keys in combos.

If nil or t, use the default of `dfk'.

Otherwise, the time should be given in Milliseconds."
  :type '(choice boolean number)
  :group 'd-emacs-dfk)

(defcustom d-emacs-dfk-directory
  (if (boundp 'd-directory)
      (concat d-directory "d-dfk/"))
  "Directory the generated configs should be put in."
  :type 'directory
  :group 'd-emacs-dfk)

(defcustom d-emacs-dfk-insert-names
  nil
  "Replace keycodes with keynames.
If you set to t, `d-emacs-dfk' expects a copy of
`https://raw.githubusercontent.com/torvalds/linux/refs/heads/master/include/uapi/linux/input-event-codes.h'
called `input-event-codes.h' in your `d-emacs-dfk-directory'."
  :type 'boolean
  :group 'd-emacs-dfk)

;;;;; Used for generating layer 0
(defcustom d-emacs-dfk-layer-level-shifts
  '((1 . nil)
    (2 . (2))
    (3 . (3))
    (4 . (2 3))
    (5 . (5))
    (6 . (2 5))
    (7 . (3 5))
    (8 . (2 3 5)))
  "Alist of layers and corresponding shift numbers.

The cars of the conses in this list are layers. The cdr is the
list of numbers of the shifts that have to be combined to access that
layer."
  :type '(alist :key-type natnum :value-type (repeat natnum))
  :group 'd-emacs-dfk)

(defcustom d-emacs-dfk-special-tap-coord-strings
  '(((-2 -4) . "<backtab>") ((-2 4) . "<tab>") ((2 0) . "SPC"))
  "Alist of coordinates for which the signs they house have special names.

This is used to generate `d-emacs-dfk-coords-layer-0'.

A name counts as special if it cannot be found out by looking up the coords
in one of the d-emacs-dfk-coords-lists or in the layout specified by
`d-emacs-xkb-layout'."
  :type '(alist :key-type coords :value-type string)
  :group 'd-emacs-dfk)

(defcustom d-emacs-dfk-special-signal-translations-list
  '(("f14" . "<XF86Launch5>") ("f15" . "<XF86Launch6>") ("scrolllock" . "<scrolllock>") ("f8" . "<f8>"))
  "List of key signals that have to be translated to be used by Emacs.

This arises because the key names used by `input-event-names' are different from
those used by Emacs."
  :type '(alist :key-type string :value-type string)
  :group 'd-emacs-dfk)

(defcustom d-emacs-dfk-discrete-modifiers-list
  '((("<XF86Launch6>") . "dM") (("<XF86Launch6>" ?C) . "ds") (("f8") . "dA"))
  "List of keys that act as discrete modifiers.

This is used to generate layer 0 for `d-emacs-coords'.

Each element of this list is supposed to be a CONS.

- The car of CONS should be a cons

  - whose car is the string that is the key's name in Emacs.

  - whose cdr is a list of modifiers, given by their corresponding
    characters.

- The cdr of CONS should be a string describing the discrete modifier
  as `dX', where `X' is the corresponding continuous modifier."
  :type '(alist :key-type (alist :key-type string :value-type (repeat character))
                :value-type string)
  :group 'd-emacs-dfk)

(defcustom d-emacs-dfk-special-layer-0-placevals-alist
  (append (mapcar (lambda (coords)
                    (cons coords "C"))
                  d-emacs-dfk-C-coords)
          (mapcar (lambda (coords)
                    (cons coords "M"))
                  d-emacs-dfk-M-coords)
          (mapcar (lambda (coords)
                    (cons coords "H"))
                  d-emacs-dfk-H-coords)
          (mapcar (lambda (coords)
                    (cons coords "s"))
                  d-emacs-dfk-s-coords))
  "List of placevals that have to be specified manually to add to layer 0."
  :type '(alist :key-type coords :value-type string)
  :group 'd-emacs-dfk)

;;;; Constants
(defconst d-emacs-dfk-shift-levels
  '(2 3 5)
  "Levels for which shifts exist that shift to that level.
These are inherited from xkb.")

(defconst d-emacs-dfk-layers-by-length
  (sort (d-emacs-fiber-by-property d-emacs-dfk-layer-level-shifts
                                   (lambda (lst) (length (cdr lst))) t)
        :lessp (lambda (cns1 cns2) (< (car cns1) (car cns2)))))

(defconst d-emacs-dfk-modifiers
  '('C 'M 'H 's)
  "The modifiers used by d-emacs-dfk.
Note that S(hift) is not among these modifiers because it counts as a level shift.")

(defconst d-emacs-dfk-2-coords
  (append d-emacs-dfk-locking-2-coords d-emacs-dfk-non-locking-2-coords)
  "Coordinates for keys that are used for Shift-signals.

These are not the keys that are actually used as Shift-keys but the
keys whose signals are used. In other words, if a key in the
`d-emacs-dfk-special-bindlist-form' is used as a Shift key, it is
endowed with one of the signals of these keys when held.")

(defconst d-emacs-dfk-3-coords
  (append d-emacs-dfk-locking-3-coords d-emacs-dfk-non-locking-3-coords)
  "Coordinates for keys that are used for ISO-Level-3-Shift-signals.

These are not the keys that are actually used as
ISO-Level-3-Shift-keys but the keys whose signals are used. In other
words, if a key in the `d-emacs-dfk-special-bindlist-form' is used as
an ISO-Level-3-Shift key, it is endowed with one of the signals of
these keys when held.")

(defconst d-emacs-dfk-5-coords
  (append d-emacs-dfk-locking-5-coords d-emacs-dfk-non-locking-5-coords)
  "Coordinates for keys that are used for ISO-Level-5-Shift-signals.

These are not the keys that are actually used as
ISO-Level-5-Shift-keys but the keys whose signals are used. In other
words, if a key in the `d-emacs-dfk-special-bindlist-form' is used as
an ISO-Level-5-Shift key, it is endowed with one of the signals of
these keys when held.")

(defconst d-emacs-dfk-modifier-coords-alist
  (let ((symbols (d-filter-obarray-by-predicate
                  (lambda (sym)
                    (string-match-p (rx "d-emacs-dfk-" (group not-newline) "-coords")
                                    (symbol-name sym))))))
    (mapcar (lambda (sym)
              (let* ((symname (symbol-name sym))
                     (match (progn (string-match (rx "d-emacs-dfk-"
                                                     (group not-newline)
                                                     "-coords")
                                                 symname)
                                   (read
                                    (match-string 1 symname)))))
                (cons match sym)))
            symbols))
  "Alist of modifier coordinate lists with their corresponding modifiers.")

;;;; Functions
(defun d-emacs-dfk--calculate-coords-code (coords)
  "Calculate the keycode corresponding to COORDS."
  (number-to-string
   (or (alist-get coords d-emacs-dfk-special-codes-list
                  (let* ((row (car coords))
                         (col (d-emacs-coords--remove-formal-places coords)))
                    (+ col (funcall (if (<= 0 col) #'floor #'ceiling)
                                    (alist-get row d-emacs-dfk-row-mid-codes-list))))
                  nil #'equal))))

(defun d-emacs-dfk--convert-datum (datum)
  "Extract the `dual-function-keys'-info from an info DATUM.

DATUM can be either a string or `d-emacs-coords'-coordinates."
  (cond ((stringp datum)
         (upcase (concat "key_" datum)))
        ((d-emacs-coords-p datum)
         (let* ((keycode (d-emacs-dfk--calculate-coords-code datum))
                (eventcodes (concat d-emacs-dfk-directory "input-event-codes.h"))
                (keyname (if d-emacs-dfk-insert-names
                             (let ((buf (current-buffer)))
                               (progn (set-buffer (find-file-noselect eventcodes))
                                      (d-emacs-goto-min)
                                      (search-forward "* Keys and buttons")
                                      (re-search-forward (eval `(rx (+ space) ,keycode)))
                                      (let* ((line (thing-at-point 'line))
                                             (linesplit (split-string line (rx (+ space)))))
                                        (prog1 (nth 1 linesplit)
                                          (set-buffer buf))))))))
           (or keyname keycode)))))

(defun d-emacs-dfk--datum-p (obj)
  "Check if OBJ is a datum."
  (and obj
       (or (stringp obj)
           (d-emacs-coords-p obj))))

(defun d-emacs-dfk-generate-config (&optional blist)
  "Generate a `dual-function-keys' configuration from BLIST."
  (interactive)
  (let ((blist (or blist (eval (symbol-value d-emacs-dfk-special-bindlist-form)))))
    (cl-flet ((convertdatumlist (data taporhold)
                (concat
                 "\["
                 (mapconcat (lambda (datum)
                              (d-emacs-dfk--convert-datum
                               datum))
                            data
                            ", ")
                 "\]")))

      (with-temp-buffer
        (when (or d-emacs-dfk-tap-time
                  d-emacs-dfk-double-tap-time
                  d-emacs-dfk-synthetic-keys-time)
          (insert "Timing:\n")
          (if d-emacs-dfk-tap-time
              (insert (format "  TAP_MILLISEC: %s\n"
                              d-emacs-dfk-tap-time)))
          (if d-emacs-dfk-double-tap-time
              (insert (format "  DOUBLE_TAP_MILLISEC: %s\n"
                              d-emacs-dfk-double-tap-time)))
          (if d-emacs-dfk-synthetic-keys-time
              (insert (format "  SYNTHETIC_KEYS_PAUSE_MILLISEC: %s\n"
                              d-emacs-dfk-synthetic-keys-time)))
          (insert "\n"))

        (insert "MAPPINGS:\n")
        (dolist (bind blist)
          (let* ((ini (car bind))
                 (trans (cdr bind))
                 (inistr (d-emacs-dfk--convert-datum ini))
                 (tapdata (condition-case nil (car trans)
                            (error "Ill-formatted translation %s" trans)))
                 (holddata (condition-case nil (cdr trans)
                             (error "Ill-formatted translation %s" trans)))
                 (tapstr (if (d-emacs-dfk--datum-p tapdata)
                             (d-emacs-dfk--convert-datum tapdata)
                           (convertdatumlist tapdata "tap")))
                 (holdstr (if (d-emacs-dfk--datum-p holddata)
                              (d-emacs-dfk--convert-datum holddata)
                            (convertdatumlist holddata "hold"))))
            (insert (format "  - KEY: %s
    TAP: %s
    HOLD: %s

" inistr tapstr holdstr))))

        (write-file (concat d-emacs-dfk-directory "d-dfk"
                            (if d-emacs-dfk-outside-mods "-out")
                            (concat "-" d-emacs-dfk-keyboard-layout-type)
                            ".yaml"))))))

(defun d-emacs-dfk-generate-standard-configs ()
  "Generate all supported configs for `d-dfk'."
  (interactive)
  (dolist (tval '(nil t))
    (dolist (lay d-emacs-dfk-supported-layout-types)
      (let ((d-emacs-dfk-outside-mods tval)
            (d-emacs-dfk-keyboard-layout-type lay))
        (d-emacs-dfk-generate-config)))))

(defun d-emacs-dfk-coords-modifier (coords)
  "Return the modifier that a pair of key coords represents if there is one."
  (d-reverse-alist-get
   coords
   d-emacs-dfk-modifier-coords-alist
   nil
   (lambda (modlistsym coords)
     (cl-member coords
                (symbol-value modlistsym)
                :test #'equal))))

(defun d-emacs-dfk-levels-to-layer (levs)
  "Return the layer that is reached through LEVS."
  (let ((levnum (length levs)))
    (d-reverse-alist-get
     levs
     (alist-get levnum d-emacs-dfk-layers-by-length #'equal)
     nil
     #'d-setequal)))

(cl-defun d-emacs-dfk-datum-to-string (dtm)
  "Convert a d-emacs-dfk-datum into a string."
  (if (stringp dtm)
      (alist-get dtm
                 d-emacs-dfk-special-signal-translations-list
                 dtm
                 nil
                 #'string=)
    (let (levs)
      (if (d-emacs-coords-p dtm)
          (let ((match (d-emacs-dfk-coords-modifier dtm)))
            (if match
                (if (cl-member match d-emacs-dfk-shift-levels :test #'equal)
                    (setq levs (list match))

                  ;; Exit if it's just a non-level modifier.
                  (cl-return-from d-emacs-dfk-datum-to-string (symbol-name match)))))
        (setq levs (mapcar #'d-emacs-dfk-coords-modifier dtm)))
      
      (if levs (let ((lay (d-emacs-dfk-levels-to-layer levs)))
                 (if lay (number-to-string lay)))))))

(defun d-emacs-dfk-generate-layer-0-placevals ()
  "Return the placevals for layer 0 for `d-emacs-coords'.

Based on the customs in `d-emacs-dfk'."
  (let ((origblist (eval (symbol-value d-emacs-dfk-special-bindlist-form))))
    
    (cl-flet*
        ((coords-of-level (num)
           (intern (concat "d-emacs-dfk-" (number-to-string num) "-coords")))

         (disc-mod-strs (str)
           (let ((dmods (d-filter-by-predicate
                         d-emacs-dfk-discrete-modifiers-list
                         (lambda (cns1) (string= str (caar cns1))))))
             (mapcar (lambda (dmodcns)
                       (let ((mods (cdar dmodcns))
                             (dmodstr (cdr dmodcns)))
                         (concat (if mods "\⟨")
                                 (mapconcat #'char-to-string
                                            mods
                                            "-")
                                 (if mods "\⟩")
                                 dmodstr)))
                     dmods))))

      ;; Remove all places that were given using strings
      (append (remq nil
                    (mapcar (lambda (bind)
                              (let* ((bplace (append '(0) (car bind)))
                                     (bval (cdr bind))
                                     (bvaltap (car bval))
                                     (bvalhold (cdr bval))
                                     (holdstr (d-emacs-dfk-datum-to-string bvalhold))
                                     (tapstr (or (d-emacs-dfk-datum-to-string bvaltap)
                                                 (alist-get
                                                  bvaltap
                                                  d-emacs-dfk-special-tap-coord-strings
                                                  nil
                                                  nil
                                                  #'equal)))
                                     (discmodstrs (disc-mod-strs tapstr))
                                     (stringslist (cl-remove-duplicates
                                                   (remq nil (append (list holdstr)
                                                                     discmodstrs
                                                                     (list tapstr)))
                                                   :test #'string=)))
                                (if (d-emacs-coords-p bplace)
                                    (cons bplace
                                          (mapconcat #'identity stringslist "/")))))
                            origblist))

              ;; We add special values after adding 0 as a layer coordinate.
              (mapcar (lambda (placeval)
                        (cons (append '(0) (car placeval))
                              (cdr placeval)))
                      d-emacs-dfk-special-layer-0-placevals-alist)))))

;;;; Add layer 0 to other layouts
(defmacro d-emacs-dfk-import-layout (laysym &optional pfx)
  "Generate a `d-emacs-dfk'-layout from the layout named LAYSYM.

The layout is bound to the variable `d-emacs-dfk-CORE-layout', where
the name of LAYSYM is of the form `PFX-CORE-layout'.

PFX is `d-emacs-xkb-' by default."
  (let* ((pfx (or pfx "d-emacs-xkb-"))
         (namecore (d-emacs-namecore laysym pfx "-layout"))
         (dfkname (intern (concat "d-emacs-dfk-" namecore "-layout"))))
    `(let ((layer0layout (d-emacs-coords-layout-from-placevals
                          (d-emacs-dfk-generate-layer-0-placevals))))
       (defconst ,dfkname
         (append layer0layout (symbol-value ',laysym))))))

(defmacro d-emacs-dfk-import-current-layout ()
  "Import the layout that is currently specified in `d-emacs-xkb-layout'.
Set the result as the value of `d-emacs-dfk-layout'."
  `(defconst d-emacs-dfk-layout (d-emacs-dfk-import-layout ,d-emacs-xkb-layout)))

;;;; Provide
(provide 'd-emacs-dfk)
;;; d-emacs-dfk.el ends here
