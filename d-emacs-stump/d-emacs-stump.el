;;; d-emacs-stump.el --- Generator for StumpWM configs from d-emacs bindlists  -*- lexical-binding: t; -*-

;; Copyright (C) 2025  Alexander Prähauser

;; Author: Alexander Prähauser <ahprae@protonmail.com>
;; Version: 1.0
;; Keywords: tools, external
;; URL: https://gitlab.com/nameiwillforget/d-emacs/d-emacs-stump/

;; This file is part of Daselt.

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;; d-emacs-stump an Emacs package designed to streamline the integration
;; between Emacs and the StumpWM window manager. It automates the generation of
;; StumpWM configuration files based on d-emacs-bindlists, allowing users
;; to define and manage keybindings, modules, and custom settings within Emacs,
;; and provides a standard-configuration in its `pkg-configs'-directory.

;; Key Features:
;; - **Automatic Configuration Generation**: Transforms d-emacs-bind-bindlists
;;   into StumpWM-compatible initialization files.

;; - **Modular Support**: Includes configurations of modules such as binwarp,
;;   spatial-groups, swm-emacs, winner-mode, clipboard-history, and more, which
;;   can be selectively enabled or disabled.

;; - **Customizable Options**: Users can specify the initialization directory,
;;   keymaps to include, and toggle the use of contrib functions.

;; - **Advanced Key Remapping**: Provides mechanisms to define exceptional key
;;   bindings and manage complex key remapping scenarios based on specific modes
;;   or conditions.

;; - **Extensible Architecture**: Easily accommodates additional modules and
;;   custom keybinding configurations through pkg-config files.

;; By leveraging d-emacs-stump.el, users can maintain a consistent and efficient
;; workflow between Emacs and StumpWM, ensuring that their window management
;; configurations are both powerful and easy to manage from within their Emacs
;; environment.

;; Usage:
;; The main function is `d-emacs-stump-generate-init'. Its output can be
;; configured using d-stumps `pkg-configs'-directory and the options in the
;; group `d-emacs-stump'.

;;; Code:
;;;; Preamble
;; (declare-function d-emacs-base-flatten-until "d-emacs-base" (lst cnd))
;; (declare-function d-emacs-bind-p "d-emacs-bind" (cns))
;; (declare-function d-emacs-xkb--format-special-key "d-emacs-xkb" (str))
;; (declare-function d-emacs-base-powerlist "d-emacs-base" (list &optional elt))
;; (declare-function d-emacs-bind-string "d-emacs-bind" (binding &optional translate csectoshft doublebind))
;; (declare-function d-emacs-bind-head "d-emacs-bind" (list))
;; (declare-function d-emacs-base-read-region "d-emacs-base" (&optional properties))
;; (declare-function d-emacs-dirs-act-on-sexps-in-file "nil" (filepath function &optional untangle))
;; (declare-function d-emacs-dirs--act-on-pkg-files-by-type-and-maybe-kill "nil" (funtypes &optional dir customt))
;; (declare-function d-emacs-dirs-act-on-pkg-files-by-type-and-maybe-kill "d-emacs-dirs" (funtypes &optional dir customt))
;; (declare-function d-emacs-base-remove-surrounding-brackets "d-emacs-base" (str))
;; (declare-function d-emacs-dirs-create-pkg-customization-options-by-variable "d-emacs-dirs" (&optional dirvar pfx))

;; (defvar d-emacs-xkb-special-key-names)

;; Automatically generated by functions
(defvar d-emacs-stump-binwarp)
(defvar d-emacs-stump-iresize)
(defvar d-emacs-stump-binwarp)
(defvar d-emacs-xkb-layouts)

(require 'd-emacs-coords)
(require 'd-emacs-xkb)
(require 'd-emacs-bind)
(require 'd-emacs-dirs)

;;;; Constants
(defconst d-emacs-stump-modules
    '("binwarp" "spatial-groups" "swm-emacs" "winner-mode" "clipboard-history" "pamixer" "screenshot-maim" "acpi-backlight" "notifications")
    "Modules for which d-emacs-stump-configurations exist.")

;;;; Customs

(defgroup d-emacs-stump
  nil
  "Customization options for d-emacs-stump in Emacs."
  :group 'd-emacs
  :prefix "d-emacs-stump-")

(defcustom d-emacs-stump
  nil
  "Non-nil means StumpWM integration with d-emacs-stump is active."
  :type 'boolean
  :group 'd-emacs-stump)

(defcustom d-emacs-stump-init-directory
  "~/.stumpwm.d/d-stump/"
  "Directory where the configs generated by d-emacs-stump shouLd be placed in."
  :type 'directory
  :group 'd-emacs-stump)

(defcustom d-emacs-stump-keymaps
  '(*emacs-map* *run-app-map* *quit-map*)
  "List of maps that should be defined in the d-emacs-stump-init."
  :type '(repeat symbol)
  :group 'd-emacs-stump)

(defcustom d-emacs-stump-contrib
      t
      "Toggle if you want to use d-emacs-stump's contrib-functions."
      :type 'boolean
      :group 'd-emacs-stump)


(defcustom d-emacs-stump-remap-exceptions-alist
  "List of cons cells defining exceptions for key remapping in StumpWM modes.

Each cons cell consists of a string representing a directory name in
`d-emacs-stump/pkg-configs/' \(without its path) and a symbol representing a
mode for which key remappings should be suspended.

If this option is set to (nil), then it is re-set by
`d-emacs-stump-set-remap-exceptions-alist' in `d-emacs-stump-initialize'."
  '(nil)
  :type '(repeat (alist :key-type string :value-type symbol))
  :group 'd-emacs-stump)

;;;;; Set-configs directory
(defun d-emacs-stump--pkg-configs-directory-test (dir)
      "Test whether DIR looks like d-emacs-stump's pkg-configs-directory."
      (declare (ftype (function (str) boolean))
           (side-effect-free t))
      (and dir
       (file-exists-p dir)
       (file-exists-p (concat dir "stumpwm"))))

(defcustom d-emacs-stump-pkg-configs-directory
  nil
  "Pkg-configs directory for `d-emacs-stump'.

This is the directory all `dbl' and `dcn' files for the d-emacs-stump-config
should be in."
  :type 'directory
  :group 'd-emacs-stump)

(defun d-emacs-stump--pkg-configs-directory-enter-manually ()
  "Specify manually where the pkg-configs-directory is."
  (declare (ftype (function () string)))
  (let* ((use-file-dialog nil) ; Dialog box doesn't let you select folder (or I was doing something wrong).
         (filename (read-file-name "Please point d-emacs-stump to its pkg-configs directory (in the directory where d-emacs-stump is installed, include trailing backslash): "
                                   nil nil
                                   #'d-emacs-stump--pkg-configs-directory-test)))
    (customize-save-variable 'd-emacs-stump-pkg-configs-directory
                             filename)
    filename))

(defun d-emacs-stump--find-pkg-configs-directory ()
            "Find d-emacs-stump's pkg-configs-directory.

Set the corresponding option so it's saved for future sessions.

If the option already points to something that looks like the right directory,
don't do anything."
            (declare (ftype (function () string)))
            (unless (d-emacs-stump--pkg-configs-directory-test d-emacs-stump-pkg-configs-directory)
    (condition-case nil (let ((current-pkg-dir
                               (concat (file-name-directory
                                        (buffer-file-name))
                                       "pkg-configs/")))
                          (if (d-emacs-stump--pkg-configs-directory-test current-pkg-dir)
                                                  (customize-save-variable 'd-emacs-stump-pkg-configs-directory
                                                       current-pkg-dir)
                            (d-emacs-stump--pkg-configs-directory-enter-manually)))
      (error (d-emacs-stump--pkg-configs-directory-enter-manually)))))

;;;; Functions
;;;;; Initial Customization
(defun d-emacs-stump-set-remap-exceptions-alist ()
  "Automatically set `d-emacs-stump-remap-exceptions-alist'.

Sets this option according to whether d-emacs-stump-binwarp is set to t."
  (declare (ftype (function () t)))
  (setopt d-emacs-stump-remap-exceptions-alist
          (list (remq nil (if (and (boundp d-emacs-stump-binwarp)
                                   d-emacs-stump-binwarp)
                              `("binwarp" . 'binwarp:*binwarp-mode-p*))))))

(defun d-emacs-stump-initialize ()
  "Initialize d-emacs-stump.

Set d-emacs-stump's pkg-configs directory, create customization options, set
remap exceptions and present the options to the user."
  (declare (ftype (function () t)))
  (d-emacs-stump--find-pkg-configs-directory)

  (d-emacs-dirs-create-pkg-customization-options-function
   d-emacs-stump-pkg-configs-directory d-emacs-stump
   (lambda (pkg)
     (if (string= (symbol-name pkg) "stumpwm")
         t
       d-emacs-stump-contrib)))

  (if (equal '(nil) d-emacs-stump-remap-exceptions-alist)
      (d-emacs-stump-set-remap-exceptions-alist))
  ;;   (customize-group-other-window "d-emacs-stump")
  ;;   (message "Customization options created. Check the defaults, re-set and save them.
  ;; Then continue with the command exit-recursive-edit.")
  ;;   (recursive-edit)
  )

;;;;; Main function
(defun d-emacs-stump-generate-init (&optional filename)
  "Generate a d-emacs-stump initialization file.

Use the files in `d-emacs-stump-pkg-configs-directory' for config. Call the
resulting file FILENAME. The default for FILENAME is `d-stump.lisp'."
  (declare (ftype (function (&optional string) string)))
  (interactive)

  (unless (bound-and-true-p d-emacs-stump-initialized)
    (d-emacs-stump-initialize))
  
  (let* ((print-level nil)
         (print-length nil)
         (filename (or filename "d-stump.lisp"))
         (filebuf (find-file-noselect (concat d-emacs-stump-init-directory
                                              filename)))
         ;; Generate keybinds from regular bindlists.
         (bindingstring
          (d-emacs-base-remove-surrounding-brackets
           (format
            "%s"
            (flatten-list
             (d-emacs-dirs-act-on-pkg-files-by-type-and-maybe-kill
              `(((lambda (filename)
                   (set-buffer (find-file-noselect filename))
                   (d-emacs-base-goto-min)
                   (d-emacs-dirs-act-on-sexps-in-file
                    filename
                    (lambda ()
                      (d-emacs-bind--generate-define-key-strings-from-bindlist
                       (d-emacs-base-read-region)))
                    t))
                 . ("dbl" "regular")))
              d-emacs-stump-pkg-configs-directory)))))

         ;; Get all lisp-code from init files. Again we have to remove initial and final brackets.
         (otherstring (d-emacs-base-remove-surrounding-brackets
                       (format "%s"
                               (remq nil
                                     (flatten-list
                                      (d-emacs-dirs-act-on-pkg-files-by-type-and-maybe-kill
                                       `((d-emacs-base-lisp-file-code . (nil "init")))
                                       d-emacs-stump-pkg-configs-directory)))))))
    (set-buffer filebuf)
    (delete-region (point-min) (point-max))
    (insert ";;;; d-emacs-stump-init.lisp\n\n")
    (insert "(stumpwm:set-prefix-key (stumpwm:kbd \"F11\"))\n")
    (d-emacs-stump--generate-module-code)
    (d-emacs-stump--generate-keymaps-code)
    (insert bindingstring)
    (insert otherstring)
    (if d-emacs-stump-iresize (d-emacs-stump--generate-iresize-map-code))
    (if d-emacs-stump-binwarp (d-emacs-stump--generate-binwarp-mode-code))
    (d-emacs-stump--generate-remap-list-code)
    (save-buffer)))

;;;;;; Generation for other layouts
(defun d-emacs-stump-generate-all-inits ()
  "Execute `d-emacs-stump-generate-init' for each layout in `d-emacs-xkb-layouts'.

Add in layer 0 to each layout first, just to be sure."
  (declare (ftype (function ()
                            ;; (list string) ; Compiler complains.
                            list)))

  (d-emacs-xkb-generate-layouts)
  (d-emacs-coords-for-layouts-in (lambda (layoutsym)
                                   (let ((namecore (d-emacs-base-namecore
                                                    layoutsym "d-emacs-dfk-" "-layout")))
                                     (d-emacs-stump-generate-init (concat "d-stump-" namecore
                                                                          ".lisp"))))
                                 (mapcar (lambda (layoutsym) (eval `(d-emacs-dfk-import-layout ,layoutsym)))
                                         d-emacs-xkb-layouts)))

;;;;; Modules
(defun d-emacs-stump--generate-module-code ()
  "Generate code to load modules in `d-emacs-stump-modules'.

A module is loaded if and only if its corresponding custom is set to t."
  (declare (ftype (function ()
                            ;; void  ; Compiler complains.
                            t)))
  (mapc (lambda (module)
          (if (intern (concat "d-emacs-stump-" module))
              (insert (format "(load-module \"%s\")\n" module))))
        d-emacs-stump-modules))

(defun d-emacs-stump--generate-keymaps-code ()
  "Generate code to initialize keymaps.

Each keymap in `d-emacs-stump-keymaps' is initialized."
  (declare (ftype (function ()
                            ;; void  ; Compiler complains.
                            t)))
  (mapc (lambda (map)
          (insert (format "(defparameter %s (make-sparse-keymap))\n" map)))
        d-emacs-stump-keymaps))

(defun d-emacs-stump--generate-iresize-map-code ()
  "This function generates the code for the iresize map."
  (declare (ftype (function ()
                            ;; void  ; Compiler complains.
                            t)))
  (let* ((blist (car (d-emacs-dirs-act-on-sexps-in-file
                      (concat d-emacs-stump-pkg-configs-directory "iresize/iresize-special.dbl")
                      (lambda () (d-emacs-base-read-region)))))
         (head (d-emacs-bind-head blist))
         (body (cdr blist)))
    (cl-flet* ((kbd-car (bind) `(kbd ,(d-emacs-bind-string bind)))
               (kbd-conss (bblist) (mapcar (lambda (bind)
                                             (cons (kbd-car bind)
                                                   (cdr bind)))
                                           bblist)))
      (insert (format "%S\n\n" (append `(define-interactive-keymap)
                                       `((iresize tile-group))
                                       `((:on-enter #'setup-iresize
                                                    :on-exit #'resize-unhide
                                                    :abort-if #'abort-resize-p
                                                    :exit-on ,(mapcar (lambda (bind) (kbd-car bind)) head)))
                                       (kbd-conss body)))))))

(defun d-emacs-stump--generate-binwarp-mode-code ()
      "Generate the code for the binwarp mode."
      (declare (ftype (function ()
                            ;; void  ; Compiler complains.
                            t)))
      (let* ((blist (car (d-emacs-dirs-act-on-sexps-in-file
                      (concat d-emacs-stump-pkg-configs-directory
                              "binwarp/binwarp-special.dbl")
                      (lambda () (d-emacs-base-read-region)))))
         (head (d-emacs-bind-head blist))
         (headhead (d-emacs-bind-head head))
         (headbody (cdr head))
         (body (cdr blist)))
    (cl-flet* ((kbd-car (bind) `(kbd ,(d-emacs-bind-string bind)))
               (kbd-lists (bblist) (mapcar (lambda (bind)
                                                 (list (kbd-car bind)
                                                   (cdr bind)))
                                           bblist)))
      (insert (format "%S\n\n" (append `(binwarp:define-binwarp-mode binwarp-mode ,headhead)
                                       `((:map *top-map*
                                               :redefine-bindings t
                                               :exit-keys ,(mapcar (lambda (bind) (kbd-car bind)) headbody)))
                                       (kbd-lists body)))))))

;;;;; Remapped Keys
(defun d-emacs-stump--exceptional-bindings ()
  "Return exceptional bindings from the marked bindlist.

This includes the head escape bindings."
  (declare (ftype (function () list)))
  (let* ((blist (d-emacs-base-read-region))
         (head (d-emacs-bind-head blist))
         (headhead (d-emacs-bind-head head))
         (headbinds (if head
                        (if headhead
                            (cdr head)
                          head))))
    (if head (append headbinds (cdr blist))
      blist)))

(defun d-emacs-stump--non-exceptional-bindings (excp-bindings)
  "Given a list of exceptional bindings EXCP-BINDINGS, return the
non-exceptional-bindings in a marked bindlist.

These are those that are not in EXCP-BINDINGS."
  (declare (ftype
            ;; (function ((list t)) (list cons)) ; Compiler complains.
            (function (list) list))
           (side-effect-free t))
  (let* ((blist (d-emacs-base-read-region))
         (head (d-emacs-bind-head blist))
         (body (if head (cdr blist) blist))
         (non-excp-binds (remq nil (mapcar
                                    (lambda (bind)
                                      (unless (cl-member
                                               bind excp-bindings
                                               :test (lambda (bind excpbind)
                                                       (string= (d-emacs-bind-string bind)
                                                                (d-emacs-bind-string excpbind))))
                                        (cons (d-emacs-bind-string bind)
                                              (cdr bind))))
                                    body))))
    non-excp-binds))

(defun d-emacs-stump--excp-bindings (excps)
  "Return exceptional bindings from a list of exceptions EXCPS."
  (declare (ftype (function (t)
                            ;; (list cons) ; Compiler complains.
                            t)))
  (apply #'append ; Append bindings of all exceptions.
         (mapcar
          (lambda (excp)
            (d-emacs-base-flatten-until
             (remq nil
                   (d-emacs-dirs-act-on-pkg-files-by-type-and-maybe-kill
                    `(((lambda (file)
                         (d-emacs-dirs-act-on-sexps-in-file
                          file
                          #'d-emacs-stump--exceptional-bindings))
                       . "dbl"))
                    (concat d-emacs-stump-pkg-configs-directory (car excp))))
             (lambda (lst)
               (d-emacs-bind-p (car lst)))))
          excps)))

(defun d-emacs-stump--format-remap-list-code (lst)
  "Format a list of remapped keys LST into a string suitable for Lisp."
  (declare (ftype (function (string) string))
           (pure t))
  ;; (replace-regexp-in-string
  ;;  (rx (one-or-more (and (zero-or-more space) "\n" (zero-or-more space)))) "\n"
  (string-replace
   "\"\n\"" "\n"
   (string-replace
    "\\\"" "\""
    (string-replace
     "\\\"" "\""
     (string-replace
      ")\"" ")"
      (string-replace
       "\"(" "("
       (string-replace
        "\n\"" "\n"
        (format "%S" lst))))))))

(defun d-emacs-stump--format-remap-bindlist-code (binds modes &optional head)
  "Format bindings BINDS for use in a remap list, including optional HEAD list.

MODES are included for conditional mappings."
  (declare (ftype (function (
                             ;; (list cons) ; Compiler complains.
                             list string &optional string)
                            string))
           (pure t))
  (concat (string-replace "\",\" " ","
                          (format
                           "%S"
                           (cons ","
                                 (cons
                                  (cons `lambda
                                        (cons
                                         `(win)
                                         (list
                                          (if head `(d-stump-test-for-window-name-and-modes
                                                     win
                                                     (list ,head)
                                                     ,(if modes (append (list 'list)
                                                                        modes)))
                                            `(d-stump-test-for-modes
                                              ,(if modes (append (list 'list)
                                                                 modes)))))))
                                  binds))))))

(defun d-emacs-stump--generate-remap-list-code ()
  "Generate the list of key translations for d-emacs-stump's init file.

It processes each bindlist in `d-emacs-stump-remapped-keys-special-bindlists'
and combines them with the exceptions defined in
`d-emacs-stump-remap-exceptions-alist`, producing remapped keys that meet the
specified conditions."
  (declare (ftype (function ()
                            ;; void  ; Compiler complains.
                            t)))

  (if (equal '(nil)  d-emacs-stump-remap-exceptions-alist)
      (error "Please set d-emacs-stump-remap-exceptions-alist or run d-emacs-stump-set-remap-exceptions-alist"))
  
  (let* ((base-file-path (concat d-emacs-stump-pkg-configs-directory
                                 "stumpwm/remapped-keys-special.dbl"))
         (user-file-path (concat d-emacs-stump-pkg-configs-directory
                                 "stumpwm/remapped-keys-user-defined-special.dbl"))
         (file-path (if (file-exists-p user-file-path)
                        user-file-path
                      base-file-path))

         (remapped-keys-list
          (apply
           #'append ; Append listlists for all exceptions.
           (mapcar ; For all exceptions
            (lambda (excps)
              (let ((modes (mapcar (lambda (excp)
                                     (cdr excp))
                                   excps))
                    (excp-bindings (d-emacs-stump--excp-bindings excps)))

                (d-emacs-dirs-act-on-sexps-in-file
                 file-path
                 (lambda () (let* ((blist (d-emacs-base-read-region))
                              (head (d-emacs-bind-head blist))
                              (non-excp-binds (d-emacs-stump--non-exceptional-bindings
                                               excp-bindings)))

                         (concat (d-emacs-stump--format-remap-bindlist-code
                                  non-excp-binds modes head)
                                 "\n"))))))
            (reverse (d-emacs-base-powerlist d-emacs-stump-remap-exceptions-alist)))))

         (remapped-keys-str (d-emacs-stump--format-remap-list-code remapped-keys-list))
         (overallstr (concat "(define-remapped-keys `"
                             remapped-keys-str
                             ")")))
    (insert overallstr)))

;;;;;; Retrieve Emacs translations
(defun d-emacs-stump-translated-emacs-keys ()
  "Return the key translations from Stump to Emacs.

Used for `d-emacs--emacs-key-translations-alist'."
  (declare (ftype (function ()
                            ;; (list (cons string string)) ; Compiler complains.
                            t))
           (side-effect-free t))
  (let* ((base-file-path (concat d-emacs-stump-pkg-configs-directory
                                 "stumpwm/remapped-keys-special.dbl"))
         (user-file-path (concat d-emacs-stump-pkg-configs-directory
                                 "stumpwm/remapped-keys-user-defined-special.dbl"))
         (file-path (if (file-exists-p user-file-path)
                        user-file-path
                      base-file-path))
         (blist (car (remq nil (d-emacs-dirs-act-on-sexps-in-file
                                file-path
                                (lambda () (let* ((blist (d-emacs-base-read-region))
                                             (head (d-emacs-bind-head blist)))
                                        (if (string= head "emacs")
                                            blist)))))))
         (body (cdr blist))
         (transconses
          (mapcar (lambda (bind)
                    (cons (d-emacs-bind-string bind)
                          (let* ((val (cdr bind))
                                 (formval (if (member val
                                                      d-emacs-xkb-special-key-names)
                                              (d-emacs-xkb--format-special-key val)
                                            val)))
                            formval)))
                  body)))

    transconses))

;;;; Provide
(provide 'd-emacs-stump)
;;; d-emacs-stump.el ends here
