;;; d-emacs-org.del -- d-emacs-commands for org  -*- lexical-binding: t; -*-

;; Copyright (C) 2024  Alexander Prähauser

;; Author: Alexander Prähauser <ahprae@protonmail.com>
;; Package-Requires: ((emacs "29.1"))
;; Version: 1.0
;; Keywords: tools
;; URL: https://gitlab.com/nameiwillforget/d-emacs/d-emacs-mode/

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:

;;

;;; Code:
;;;; Preamble
(defun d-emacs-org-insert-superheading (&optional number)
  "Insert a heading one or several levels above the previous one.
By default, go one level up. If a prefix number is given, that number of levels
are gone up."
  (interactive "p")
  (org-insert-heading)
  (left-char)
  (if number
      (delete-char (- number))
    (delete-char -1))
  (right-char))

(defun d-emacs-org-insert-todo-superheading (&optional number)
  "Insert a todo heading one or several levels above the previous one.
By default, go one level up. If a prefix number is given, that number of levels
are gone up."
  (interactive "p")
  (call-interactively #'org-insert-todo-heading)
  (left-word)
  (left-char)
  (if number
      (delete-char (- number))
    (delete-char -1))
  (right-word)
  (insert " "))

(defun d-emacs-org-insert-todo-heading-after-current ()
  "Insert a todo heading one level above the previous one."
  (interactive)
  (org-insert-heading-after-current)
  (org-todo))

(defun d-emacs-org-convert-quote ()
  "Convert the quote at or surrounding point to an Org block quote."
  (interactive)
  (cl-flet ((format-quote ()
              (mark-sexp)
              (let* ((quote (buffer-substring (1+ (region-beginning))
                                              (1- (region-end))))
                     (finquote (concat "#+begin_quote\n"
                                       quote
                                       "\n#+end_quote")))
                (d-emacs-base-replace-region finquote))))
    (save-excursion
      ;; Go up lists as long as possible or until a quote is found.
      (let ((endloop)
            (backward-up-fun ; Use `sp-backward-up-sexp' if possible.
             (if (package-installed-p 'smartparens)
                 #'sp-backward-up-sexp
               (lambda () (d-emacs-backward-up-list 1)))))
        (while (not endloop)
          (if (= (char-after) ?\")
              (progn (format-quote)
                     (setq endloop t))
            (condition-case msg (funcall backward-up-fun)
              (error (progn (setq endloop t)
                            (message msg))))))))))

(defun d-emacs-org-remove-page-heading (heading)
  "Remove page HEADING of imported documents.
Might need to be adapted to your imported document."
  (interactive "sHeading: ")
  (save-excursion
    (while (re-search-forward (concat heading (rx (or blank "\n")
                                                  (*? anychar)
                                                  word-end))
                              nil t)
      (delete-region (match-beginning 0)
                     (match-end 0))
      (delete-all-space)
      (insert " "))))

(provide 'd-emacs-org)
;;; d-emacs-org.el ends here
